Jenkins, is an open source Continuous Integration (ci/cd)
tool written in Java. 

Junkins can be installed in Multiple -Platforms :  
  Linux
    Hosted by AWS 
  Windows
    LOCAL system
  MacOS-
    LOCAL system
  solaris

 Explain you EXPERIENCE in open source Technologies?? 
   Jenkins, maven, tomcat, sonarqube, nexus, Linux, git, github, Nginx  

 HUDSON --> 2004 -- > Oracle
 kubernetes 
    2011 --> JENKINS Community --> Jenkins

Jenkins:
  Continuous Integration
    Maven-web-app --> java  (fintech / e-commerce / NIH )
      Code-->Git-->Maven(validates, compiles, tests, package)-->
         
    CODE--COMMITS--Git/github---Jenkins---Maven---sonarqube--nexus  

              Target env't (Tomcat)
Coding:
 Current version:v44 [30,000  Lines]
 Current version:v45 [ 1,000  Lines]

    Continuous Delivery
    Continuous Deployment

Upstrean Jenkins jobs   --- CI Job [Build & Release]
   Clone  
   UnitTesting 
   Build  
   CodeQualityAnalysis
   UploadArtifacts    
Downstream Jenkins jobs --- CD Job 
   Deploy app to UAT/Testing Environment 
     + Testing [integration, regression, functional, penetration, performance, load, ]
     + approval [auto/manual]  
   Deploy to the Production Environment


  CI Tool (Jenkins): ---> 
      GitHub --> Maven --> SonarQube --> Nexus  --> CI 
                   +
                Testing *(automated)
                   |=   Continuous Deployment
                  Development to Production

  CI Tool (Jenkins): ---> 
      GitHub --> Maven --> SonarQube --> Nexus  --> CI 
                   +
                Testing *(manually)  (Testing/UAT)
                   |=   Continuous DeLIVERY
                  Development to Production

  dev --> runs well in dev 

  testing / staging
     perform additional testing:
        performance 
        integration 
        regression 
        security - penetration 

  UAT / Pre-prod 
  Production

Have you managed Continuous Delivery and Continuous Deployment projects??
 YES:
 Internal projects: In house  --> Continuous Deployment
 
 External projects: Clients  ---> Continuous Delivery
 
Nature of application:
   We support critical applications for a FinTech/e-commerce 

DevOps is all about automation   
7Cs:
   CD---> Continuous Development [Git/GitHub/IDEs /GitBranch/gitTag]
   CI --> Continuous Integration [Git/GitHub/Jenkins/maven/sonarqube/nexus] 
         [Build and Release Engineering]
   CD --> Continuous Delivery [build=packages/artifacts-->testing/UAT--manualApproval--- prod]
   CD --> Continuous Deployment [build=packages/artifacts-->testing/UAT--auto--- prod]
   CM --> Continuous Monitoring
            https://www.tesla.com/en_ca/powerwall  
            https://www.tesla.com/en_ca/modelx
   CS --> Continuous security
   CT --> Continuous Testing 

Jenkins installation:

Which edition of jenkins have you used in Production??
 Installation of Jenkins:  Community Edition (CE)
 Jenkins CE  
 Jenkins EE - CloudBees Jenkins  

Jenkins.sh 
==========
#!/bin/bash
# Author: Prof Legah
# date: 25/08/2020
# Installing Jenkins on RHEL 7/8, CentOS 7/8 or Amazon Linux OS
# You can execute this script as user-data when launching your EC2 VM.
sudo timedatectl set-timezone America/New_York
sudo hostnamectl set-hostname jenkins
# CREATE HOSTNAME
sudo yum install wget -y
sudo wget -O /etc/yum.repos.d/jenkins.repo \
    https://pkg.jenkins.io/redhat-stable/jenkins.repo
sudo rpm --import https://pkg.jenkins.io/redhat-stable/jenkins.io.key
sudo yum upgrade -y
# Add required dependencies for the jenkins package
sudo yum install java-11-openjdk -y
sudo yum install jenkins -y
sudo systemctl daemon-reload
# start jenkins
# Start Jenkins
# You can enable the Jenkins service to start at boot with the command:
sudo systemctl enable jenkins
#You can start the Jenkins service with the command:=
sudo systemctl start jenkins
# You can check the status of the Jenkins service using the command:
sudo systemctl status jenkins
sudo su - ec2-user
echo "echo of jenkins installation"

==============
1. Create a t2.meduim EC2 Instance/Server/VM in your cloud of choice [aws].
         azure/ GCP / VMWare /   
2. Install pre-requisit for jenkins (java-11-openjdk)
3. Install Jenkins using bash-shell script 
4. Start jenkins
     sudo systemctl enable jenkins &&
     sudo systemctl start jenkins   
5. Verify if jenkins is running 
      systemctl status jenkins
      ps -ef | grep jankins
      curl localhost:8080 
      curl 13.52.240.58:8080   
6. Access jenkins on the browser  
      http://13.52.240.58:8080/
    cat /var/lib/jenkins/secrets/initialAdminPassword 
    sudo cat /var/lib/jenkins/secrets/initialAdminPassword   
7. Install default and custom Jenkins Plugins  
   Plugins extend Jenkins with additional features to support many different needs
   and automate tasks.

   http://13.52.240.58:8080/


 Installation of CloudBees Jenkins: ENTERPRISE ENTERPRISE -EE

13.52.240.58

Tesla Client:
  java web applications    
  1. We have created and shared the project GitHub repo  with developers  
     Developers commit/push code to the project repo in GitHub using Git branching strategy 
  2. Jenkins GitHub Integration:
   https://github.com/Landmark-Technologies/maven-web-application 

   https://github.com/LandmakTechnology/maven-web-app
         private repo:
       AUTHENTICATION: 
          username:legah2045
          password:admin123 
          token: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
       Credentials: 

  3. Run JUnit Testing and Build with Maven  
    Jenkins maven Integration:  mvn package 
     dashboard--manage Jenkins ---  Global Tool configuration --maven   
     project -- java-web-app

  4. Jenkins SonarQube Integration;  mvn sonar:sonar :
----------------------------------------------  
NB: Your SonarQube server must be running 
    SonarQube service must be running 
         sh /opt/sonarqube/bin/linux-x86-64/sonar.sh status
          sh /opt/sonarqube/bin/linux-x86-64/sonar.sh start
 1. modify 'Properties' tag with SonarQube server details in  pom.xml
    vi pom.xml:
      http://172.31.22.207:9000/
      http://54.176.76.14:9000/
         username: admin 
         password: admin 


      <Property>
        <sonar.host.url>http://172.31.27.227:9000/</sonar.host.url>
    <sonar.login>admin</sonar.login>
    <sonar.password>admin</sonar.password>
      </Property>
  2. Open required ports in SonarQube server to allow traffic from jenkins server
      port 9000 is open in the firewall/security group
 
 or Install and configure JaCoCo plugin in Jenkins UI:

Jenkins Nexus Integration;  mvn deploy:
Upload build artifacts:
--------------------------------------  
1. Create repos in nexus-UI to upload aritifacts
   http://52.53.227.31:8191/landmark/repository/tesla-fe-releases/ 
   http://52.53.227.31:8191/landmark/repository/tesla-fe-snapshots/


2. modify 'distributionManagement' tag with nexus repos details  in  pom.xml
        vi pom.xml
            <distributionManagement>

  <distributionManagement>
    
      <repository>
        <id>nexus</id>
        <name>Landmark Technologies Releases Nexus Repository</name>
        <url>http://52.53.227.31:8191/landmark/repository/tesla-fe-releases/</url> 
      </repository>
      
      <snapshotRepository>
        <id>nexus</id>
        <name>Landmark Technologies Snapshot Nexus Repository </name>
        <url>http://52.53.227.31:8191/landmark/repository/tesla-fe-snapshots/</url>
      </snapshotRepository>
  </distributionManagement>

3. modify /maven/conf/setting.xml in maven (JENKINS) server with login credentials  
=# vi /nexus/conf/setting.xml
sudo vi  /var/lib/jenkins/tools/hudson.tasks.Maven_MavenInstallation/maven3.8.6/conf/settings.xml

            <server>
                <id>nexus</id>
                <username>admin</username>
                <password>admin123</password>
            </server> 
    4. Open required ports[8081] in Nexus server to allow traffic from jenkins server

 JENKINS-TOMCAT INTEGRATION:
============================= 
1. INSTALL 'Deploy to container' Plugin on Jenkins UI
   This plugin allows you to deploy a war to a container after a successful build. 

2. ADD A TOMCAT USER in /tomcat9/conf/tomcat-users.xml 
   sudo vi /tomcat9/conf/tomcat-users.xml
   <user username="myLandmark" password="admin123" roles="manager-gui,admin-gui,manager-script"/>

3. vi /opt/tomcat9/webapps/manager/META-INF/context.xml

access application:
     http://35.170.249.131:8080/myapps  
==================

Front desk == 
African kitchen == 
business == 

Co-op 

==========================================================
tesla-webapp =  
Onboard a new project for Tesla  tesla-app =  
Create a Jenkins job to test, build and deploy the application to a tomcat server
Requirements:
  1. Create Team in our GitHub company a/c add and and assign member's roles and tasks
  2. Create a github repository for the  project  
  3. share the repository details for Team members and developers  
  4. Install and configure:
      jenkins for build and ci/cd 
      SonarQube for CodeQualityAnalysis  
      nexus for artifactory   
      tomcat as appSever 
      nginx as web server
  6. Create a Jenkins job for the project  
  7. configure Jenkins:
        maven Integration  
        SonarQube Integration  
        nexus integration  
        tomcat integration  
        git Integration
        GitHub  Integration
        notification [slack, email]

=================================================  
1. project1 
     https://github.com/LandmakTechnology/maven-web-app  

2. https://github.com/LandmakTechnology/tesla-app

   http://35.170.249.131:8080/tesla  

 Jenkins slack or email notification
 ===================================
 Step 1) 
   Install Email Extension Plugin as follows:
     Manage Jenkins ---> Manage Plugins ---> Install “Email Extension Plugin “

Step 2)
    Add the smtp server host as follows.
        smtp = simple mail transfer protocol 
    Click on Manage Jenkins ---> Configure System --->
       smtp.gmail.com
       smtp ports: 25 
                   465 587  

Step 3: In Job configure Editable Email as follows.
Select any Job, which we need to configure Email notification ---> Click on Configure ---> Select the
Post-build Actions section.
Click on Advanced Settings …
It will expand and will show more settings and click on Add Trigger and select the Always.

===========================================
Build Now --- manual  

landmark@gmail.com

Automate builds using build triggers.
=====================================
1. Timer [cronjob ] = build periodically  :
     run this job every mid night [database backup]  
     run this job every 2am [database backup] 
   Started by timer

2. Changes in SCM via poll SCM  :
     * * * * * Every minute Jenkins will check for changes in the src to trigger a build  
     H * * * * Every hour Jenkins will check for changes in the src to trigger a build
     Software builds 
     application build and Deployment
     Started by an SCM change

3. Changes in SCM via GitHub-webhook 
     GitHub will notify Jenkins to trigger a build once there is a change in the scm [src]  
     
    Jenkins Server url =  http://13.52.240.58:8080/
    GitHub-webhook     =  http://13.52.240.58:8080/github-webhook/   

     Software builds 
     application build and Deployment
     Started by GitHub push by legah2045 

     api call  

4. Build other projects  
     Upstrean project  
       1. build & release  

       2. Downstream project 
             deploy2Tomcat

Started by user Landmark Technologies

